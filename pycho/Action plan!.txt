Action plan!


    I will aim to make the AI of any thing that is not theplayer neural-network based. Inputs shall be in the form of actions taken in the world, with the desired outputs being those of a motive of a player. Each time a creature is destroyed, the neural network is updated in order to make the moves they took be less appealing in order to generate an amount of data that can be used to generate a realistic system involving a lot o fcreatues in the in game world. I intend on creating these creatures so that they seem as intelligent and indepnted as possible. In order to breed these creatures so that I find a good starting neural network for them to use based on their personality, I will be using machine learning and genertic algorithms and then weighing their performance against the desired endstates. In order to achieve this, I will provide a series of actions that they can carry out - things will be discussed in a much higher level than "move x that way 2". Instead, everything shall be done in the term of the goals they are attempting to achieve. For example, let's say that a character is lowe on health. The goal they should be trying to meet should either be "go balls to the walls and try and kill everything you can before dying" or "hide, find a medpack then run out again with guns blazing.". 

    Each character shall keep in mind what action they are aiming for, with each step reevaluted when the situtation they are in changes enough in order to generate a brand new neural decision. These neural networks will persist between plays in order to improve the player experience over time. They will be stored as JSON objects.


    I qutie like the diea of a hivemind which works by basing neural network decissions on a weighted base from a sum of all the enemies inside  the hive. Perhaps this could develop into something I can then use elsewhere to test against oother things like realworld application flocking and mimicking of animal behaviour. Imagine a game where the enemies work together in order to defeat you, rather than merely looking like they are all on the same side.


Technology decissions

    I have decided to use Python in order to allow powerful creation of applications which can be expressed in simple, readable code while still being insanely complex and achieving a lot. For displaying the graphics, I used OpenGL inside PyQT. PyQt allows for a lot more control and flexiblity over alternatives like GLUT, and the Qt libraries have some brilliant stuff, like QThreads or Qtimers which allow you to do things that you would have trouble doing without them. For example, I use 4 threads in my game in order to greatly improve the player experience. Without them, the gameplay would not be as fluid as it should be the player will have a bad time when the frame rate is low or the user interaction element does not take place in the expected amount of time.



TODO:

    Redesign game engine to work correctly with ticks as it should do.